diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/controller/df_db_notifier.py ./dragonflow/controller/df_db_notifier.py
--- /opt/stack/dragonflow/dragonflow/controller/df_db_notifier.py	2016-09-28 21:15:39.787869000 +0800
+++ ./dragonflow/controller/df_db_notifier.py	2016-09-28 19:34:23.301672700 +0800
@@ -86,9 +86,9 @@
         :param router: logical router that is updated
         """
 
-    def router_deleted(self, router_id):
+    def router_deleted(self, router):
         """router updated hook callback
 
 
-        :param router_id: id of router that is deleted
+        :param router: router that is deleted
         """
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/controller/df_local_controller.py ./dragonflow/controller/df_local_controller.py
--- /opt/stack/dragonflow/dragonflow/controller/df_local_controller.py	2016-09-28 21:15:39.787869000 +0800
+++ ./dragonflow/controller/df_local_controller.py	2016-09-28 19:33:45.658605339 +0800
@@ -357,7 +357,13 @@
         self.db_store.update_router(lrouter.get_id(), lrouter)
 
     def router_deleted(self, lrouter_id):
-        self.open_flow_app.notify_delete_router(lrouter_id)
+        router = self.db_store.get_router(lrouter_id)
+        if router is None:
+            LOG.warning(_LW("Try to delete a nonexistent router(%s)"),
+                        lrouter_id)
+            return
+        LOG.info(_LI("Removing router = %s"), lrouter_id)
+        self.open_flow_app.notify_delete_router(router)
         self.db_store.delete_router(lrouter_id)
 
     def security_group_updated(self, secgroup):
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/controller/l3_app.py ./dragonflow/controller/l3_app.py
--- /opt/stack/dragonflow/dragonflow/controller/l3_app.py	2016-09-28 21:15:39.787869000 +0800
+++ ./dragonflow/controller/l3_app.py	2016-09-28 19:36:21.978648680 +0800
@@ -54,13 +54,9 @@
 
         self._update_router_interfaces(old_lrouter, router)
 
-    def router_deleted(self, router_id):
-        old_lrouter = self.db_store.get_router(router_id)
-        if old_lrouter is None:
-            return
-
-        for old_port in old_lrouter.get_ports():
-            self._delete_router_port(old_port)
+    def router_deleted(self, router):
+        for port in router.get_ports():
+            self._delete_router_port(port)
 
     def _update_router_interfaces(self, old_router, new_router):
         new_router_ports = new_router.get_ports()
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/controller/l3_proactive_app.py ./dragonflow/controller/l3_proactive_app.py
--- /opt/stack/dragonflow/dragonflow/controller/l3_proactive_app.py	2016-09-28 21:15:39.787869000 +0800
+++ ./dragonflow/controller/l3_proactive_app.py	2016-09-28 20:53:52.974662057 +0800
@@ -45,17 +45,13 @@
             LOG.info(_LI("Logical Router created = %s"), router)
             self._add_new_lrouter(router)
             return
-
+        LOG.info(_LI("Logical router updated = %s"), router)
         self._update_router_interfaces(old_lrouter, router)
         self._update_router_attributes(old_lrouter, router)
 
-    def router_deleted(self, router_id):
-        old_lrouter = self.db_store.get_router(router_id)
-        if old_lrouter is None:
-            return
-
-        for old_port in old_lrouter.get_ports():
-            self._delete_router_port(old_port)
+    def router_deleted(self, router):
+        for port in router.get_ports():
+            self._delete_router_port(port)
 
     def _update_router_attributes(self, old_router, new_router):
         old_routes = old_router.get_routes()
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/controller/ryu_base_app.py ./dragonflow/controller/ryu_base_app.py
--- /opt/stack/dragonflow/dragonflow/controller/ryu_base_app.py	2016-09-28 21:15:39.787869000 +0800
+++ ./dragonflow/controller/ryu_base_app.py	2016-09-28 19:35:10.066234054 +0800
@@ -83,8 +83,8 @@
     def notify_update_router(self, router=None):
         self.dispatcher.dispatch('router_updated', router=router)
 
-    def notify_delete_router(self, router_id=None):
-        self.dispatcher.dispatch('router_deleted', router_id=router_id)
+    def notify_delete_router(self, router=None):
+        self.dispatcher.dispatch('router_deleted', router=router)
 
     def notify_add_local_port(self, lport=None):
         self.dispatcher.dispatch('add_local_port', lport=lport)
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/tests/unit/test_l3_app.py ./dragonflow/tests/unit/test_l3_app.py
--- /opt/stack/dragonflow/dragonflow/tests/unit/test_l3_app.py	2016-09-28 21:16:35.083869000 +0800
+++ ./dragonflow/tests/unit/test_l3_app.py	2016-09-28 21:17:31.219977251 +0800
@@ -12,147 +12,29 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
-import logging
-from mock import Mock
-import sys
-
-from oslo_serialization import jsonutils
-import ryu.ofproto.ofproto_v1_3_parser as parser
+import mock
 
 from dragonflow.controller.common import constants as const
-from dragonflow.controller.l3_app import L3App
-from dragonflow.db.api_nb import LogicalRouter, LogicalPort, LogicalSwitch
-from dragonflow.db.db_store import DbStore
-from dragonflow.tests import base as tests_base
-
-logger = logging.getLogger()
-logger.level = logging.DEBUG
-stream_handler = logging.StreamHandler(sys.stdout)
-logger.addHandler(stream_handler)
+from dragonflow.tests.unit import test_app_base
 
 
-class TestL3App(tests_base.BaseTestCase):
+class TestL3App(test_app_base.DFAppTestBase):
+    apps_list = "l3_app.L3App"
 
     def setUp(self):
         super(TestL3App, self).setUp()
-        self.db_store = DbStore()
-        self.mock_api = Mock(name="api")
-        self.mock_nb_api = Mock(name="nb_api")
-        self.mock_vswitch_api = Mock(name="vswitch_api")
-
-        mock_datapath = Mock(name="datapath", ofproto_parser=parser)
-        mock_api = Mock(name='api')
-        self.mock_mod_flow = Mock(name='mod_flow')
-        mock_api.get_datapatch.return_value = mock_datapath
-
-        self.app = L3App(self.mock_api, self.db_store,
-                         self.mock_vswitch_api,
-                         self.mock_nb_api)
+        self.app = self.open_flow_app.dispatcher.apps[0]
+        self.mock_mod_flow = mock.Mock(name='mod_flow')
         self.app.mod_flow = self.mock_mod_flow
+        self.router = test_app_base.fake_logic_router1
 
-        self.ri_port_value = '''
-            {
-                "name": "ri_port",
-                "chassis": "test_chassis",
-                "admin_state": "True",
-                "ips": ["192.168.10.1"],
-                "macs": ["112233445566"],
-                "lswitch": "lswitch1",
-                "topic": "tenant1",
-                "tunnel_key": 1025
-            }
-            '''
-        self.nexthop_port_value = '''
-            {
-                "name": "nexthop_port",
-                "chassis": "test_chassis",
-                "admin_state": "True",
-                "ips": ["192.168.10.254"],
-                "macs": ["112233445577"],
-                "lswitch": "lswitch1",
-                "topic": "tenant1",
-                "tunnel_key": 1024
-            }
-            '''
-
-        self.lswitch1_value = '''
-            {
-                "name": "lswitch1",
-                "subnets": [
-                    {
-                        "topic": "tenant1",
-                        "gateway_ip": "192.168.10.1",
-                        "cidr": "192.168.10.0/24",
-                        "id": "subnet1",
-                        "name": "subnet1"
-                    }
-                ]
-            }
-        '''
-
-        self.router_value = '''
-            {
-                "id": "router1",
-                "topic": "tenant1",
-                "version": "1.0",
-                "ports": [
-                    {
-                        "network": "192.168.10.0/24",
-                        "lswitch": "lswitch1",
-                        "topic": "tenant1",
-                        "id": "ri_port",
-                        "lrouter": "router1",
-                        "mac": "112233445566",
-                        "tunnel_key": 1025
-                    }
-                ]
-            }
-            '''
-        self.router2_value = '''
-            {
-                "id": "router1",
-                "topic": "tenant1",
-                "version": "1.0",
-                "ports": [
-                    {
-                        "network": "192.168.10.0/24",
-                        "lswitch": "lswitch1",
-                        "topic": "tenant1",
-                        "id": "ri_port",
-                        "lrouter": "router1",
-                        "mac": "112233445566",
-                        "tunnel_key": 1025
-                    }
-                ]
-            }
-            '''
-
-        self.route1 = {"destination": "10.100.0.0/16",
-                       "nexthop": "192.168.10.254"}
-
-        self.ri_port = LogicalPort(self.ri_port_value)
-        self.nexthop_port = LogicalPort(self.nexthop_port_value)
-        self.lswitch1 = LogicalSwitch(self.lswitch1_value)
-        self.router1 = LogicalRouter(self.router_value)
-        self.db_store.set_port('ri_port', self.ri_port, False, 'tenant1')
-        self.db_store.set_port('nexthop_port', self.nexthop_port,
-                               False, 'tenant1')
-        self.db_store.set_lswitch('lswitch1', self.lswitch1, 'tenant1')
-
-        router_value = jsonutils.loads(self.router_value)
-        router_value['routes'] = [self.route1]
-        self.router1_with_routes = LogicalRouter(jsonutils.dumps(router_value))
-
-    def test_add_router(self):
-        self.app.router_updated(self.router1)
+    def test_add_del_router(self):
+        self.controller.router_deleted(self.router.get_id())
+        #print self.mock_mod_flow.mock_calls
+        assert self.mock_mod_flow.call_count == 3
+        self.mock_mod_flow.reset_mock()
+        self.controller.router_updated(self.router)
         #print self.mock_mod_flow.mock_calls
         assert self.mock_mod_flow.call_count == 2
         args, kwargs = self.mock_mod_flow.call_args
         assert kwargs['table_id'] == const.L2_LOOKUP_TABLE
-
-    def test_delete_router(self):
-        self.db_store.update_router("router1", self.router1_with_routes,
-                                    topic='tenant1')
-        self.app.router_deleted('router1')
-        #print self.mock_mod_flow.mock_calls
-        assert self.mock_mod_flow.call_count == 3
diff -ruN -x '*.pyc' /opt/stack/dragonflow/dragonflow/tests/unit/test_l3_proactive_app.py ./dragonflow/tests/unit/test_l3_proactive_app.py
--- /opt/stack/dragonflow/dragonflow/tests/unit/test_l3_proactive_app.py	2016-09-28 11:28:29.411869000 +0800
+++ ./dragonflow/tests/unit/test_l3_proactive_app.py	2016-09-28 21:18:40.353146432 +0800
@@ -13,157 +13,47 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
-import logging
-from mock import Mock
-import sys
-
-from oslo_serialization import jsonutils
-import ryu.ofproto.ofproto_v1_3_parser as parser
+import copy
+import mock
 
 from dragonflow.controller.common import constants as const
-from dragonflow.controller.l3_proactive_app import L3ProactiveApp
-from dragonflow.db.api_nb import LogicalRouter, LogicalPort, LogicalSwitch
-from dragonflow.db.db_store import DbStore
-from dragonflow.tests import base as tests_base
-
-logger = logging.getLogger()
-logger.level = logging.DEBUG
-stream_handler = logging.StreamHandler(sys.stdout)
-logger.addHandler(stream_handler)
+from dragonflow.tests.unit import test_app_base
 
 
-class TestL3ProactiveApp(tests_base.BaseTestCase):
+class TestL3ProactiveApp(test_app_base.DFAppTestBase):
+    apps_list = "l3_proactive_app.L3ProactiveApp"
 
     def setUp(self):
         super(TestL3ProactiveApp, self).setUp()
-        self.db_store = DbStore()
-        self.mock_api = Mock(name="api")
-        self.mock_nb_api = Mock(name="nb_api")
-        self.mock_vswitch_api = Mock(name="vswitch_api")
-
-        mock_datapath = Mock(name="datapath", ofproto_parser=parser)
-        mock_api = Mock(name='api')
-        self.mock_mod_flow = Mock(name='mod_flow')
-        mock_api.get_datapatch.return_value = mock_datapath
-
-        self.app = L3ProactiveApp(self.mock_api, self.db_store,
-                                  self.mock_vswitch_api,
-                                  self.mock_nb_api)
+        self.app = self.open_flow_app.dispatcher.apps[0]
+        self.mock_mod_flow = mock.Mock(name='mod_flow')
         self.app.mod_flow = self.mock_mod_flow
+        self.router = test_app_base.fake_logic_router1
 
-        self.ri_port_value = '''
-            {
-                "name": "ri_port",
-                "chassis": "test_chassis",
-                "admin_state": "True",
-                "ips": ["192.168.10.1"],
-                "macs": ["112233445566"],
-                "lswitch": "lswitch1",
-                "topic": "tenant1",
-                "tunnel_key": 1025
-            }
-            '''
-        self.nexthop_port_value = '''
-            {
-                "name": "nexthop_port",
-                "chassis": "test_chassis",
-                "admin_state": "True",
-                "ips": ["192.168.10.254"],
-                "macs": ["112233445577"],
-                "lswitch": "lswitch1",
-                "topic": "tenant1",
-                "tunnel_key": 1024
-            }
-            '''
-
-        self.lswitch1_value = '''
-            {
-                "name": "lswitch1",
-                "subnets": [
-                    {
-                        "topic": "tenant1",
-                        "gateway_ip": "192.168.10.1",
-                        "cidr": "192.168.10.0/24",
-                        "id": "subnet1",
-                        "name": "subnet1"
-                    }
-                ]
-            }
-        '''
-
-        self.router_value = '''
-            {
-                "id": "router1",
-                "topic": "tenant1",
-                "version": "1.0",
-                "ports": [
-                    {
-                        "network": "192.168.10.0/24",
-                        "lswitch": "lswitch1",
-                        "topic": "tenant1",
-                        "id": "ri_port",
-                        "lrouter": "router1",
-                        "mac": "112233445566",
-                        "tunnel_key": 1025
-                    }
-                ]
-            }
-            '''
-        self.router2_value = '''
-            {
-                "id": "router1",
-                "topic": "tenant1",
-                "version": "1.0",
-                "ports": [
-                    {
-                        "network": "192.168.10.0/24",
-                        "lswitch": "lswitch1",
-                        "topic": "tenant1",
-                        "id": "ri_port",
-                        "lrouter": "router1",
-                        "mac": "112233445566",
-                        "tunnel_key": 1025
-                    }
-                ]
-            }
-            '''
-
-        self.route1 = {"destination": "10.100.0.0/16",
-                       "nexthop": "192.168.10.254"}
-
-        self.ri_port = LogicalPort(self.ri_port_value)
-        self.nexthop_port = LogicalPort(self.nexthop_port_value)
-        self.lswitch1 = LogicalSwitch(self.lswitch1_value)
-        self.router1 = LogicalRouter(self.router_value)
-        self.db_store.set_port('ri_port', self.ri_port, False, 'tenant1')
-        self.db_store.set_port('nexthop_port', self.nexthop_port,
-                               False, 'tenant1')
-        self.db_store.set_lswitch('lswitch1', self.lswitch1, 'tenant1')
-
-        router_value = jsonutils.loads(self.router_value)
-        router_value['routes'] = [self.route1]
-        self.router1_with_routes = LogicalRouter(jsonutils.dumps(router_value))
+    def test_add_del_route(self):
+        # delete router
+        self.controller.router_deleted(self.router.get_id())
+        assert self.mock_mod_flow.call_count == 4
 
-    def test_add_router(self):
-        self.app.router_updated(self.router1)
+        # add router
+        self.mock_mod_flow.reset_mock()
+        self.controller.router_updated(self.router)
         assert self.mock_mod_flow.call_count == 3
         args, kwargs = self.mock_mod_flow.call_args
         assert kwargs['table_id'] == const.L2_LOOKUP_TABLE
+        self.mock_mod_flow.reset_mock()
 
-    def test_update_router_add_route(self):
-        self.db_store.update_router("router1", self.router1, topic='tenant1')
-        self.app.router_updated(self.router1_with_routes)
-        assert self.mock_mod_flow.call_count == 1
-
-    def test_update_router_del_route(self):
-        self.db_store.update_router("router1",
-                                    self.router1_with_routes,
-                                    topic='tenant1')
-        self.app.router_updated(self.router1)
+        # add route
+        route = {"destination": "10.100.0.0/16",
+                 "nexthop": "10.0.0.6"}
+        router_with_route = copy.deepcopy(self.router)
+        router_with_route.lrouter['routes'] = [route]
+        self.controller.logical_port_created(test_app_base.fake_local_port1)
+        self.controller.router_updated(router_with_route)
+        assert self.mock_mod_flow.call_count == 2
+
+        # delete route
+        self.mock_mod_flow.reset_mock()
+        self.router.lrouter['routes'] = []
+        self.controller.router_updated(self.router)
         assert self.mock_mod_flow.call_count == 1
-
-    def test_delete_router(self):
-        self.db_store.update_router("router1", self.router1_with_routes,
-                                    topic='tenant1')
-        self.app.router_deleted('router1')
-        assert self.mock_mod_flow.call_count == 4
