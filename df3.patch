diff -ruN dragonflow_baseline/dragonflow/common/exceptions.py dragonflow/dragonflow/common/exceptions.py
--- dragonflow_baseline/dragonflow/common/exceptions.py	2016-08-26 10:30:41.999869000 +0800
+++ dragonflow/dragonflow/common/exceptions.py	2016-08-26 09:40:18.650300937 +0800
@@ -82,6 +82,10 @@
     message = _('DB client not found, ip=%(ip)s')
 
 
+class DBStoreRecordNotFound(DragonflowException):
+    message = _('%(record)s not found in db_store!')
+
+
 class NoRemoteIPProxyException(DragonflowException):
     message = _('The metadata request has no remote IP')
 
diff -ruN dragonflow_baseline/dragonflow/controller/l3_proactive_app.py dragonflow/dragonflow/controller/l3_proactive_app.py
--- dragonflow_baseline/dragonflow/controller/l3_proactive_app.py	2016-08-26 10:30:42.003869000 +0800
+++ dragonflow/dragonflow/controller/l3_proactive_app.py	2016-08-26 10:24:11.470362180 +0800
@@ -221,25 +221,22 @@
         dst_netmask = destination.netmask
 
         if destination.version == 4:
-            match = parser.OFPMatch(eth_type=ether.ETH_TYPE_IP,
-                                    metadata=network_id,
-                                    eth_dst=router_if_mac,
-                                    ipv4_src=(src_network, src_netmask),
-                                    ipv4_dst=(dst_network, dst_netmask))
-
+            l3_type = ether.ETH_TYPE_IP
         else:
-            match = parser.OFPMatch(eth_type=ether.ETH_TYPE_IPV6,
-                                    metadata=network_id,
-                                    eth_dst=router_if_mac,
-                                    ipv6_src=(src_network, src_netmask),
-                                    ipv6_dst=(dst_network, dst_netmask))
+            l3_type = ether.ETH_TYPE_IPV6
+
+        match = parser.OFPMatch(eth_type=l3_type,
+                                metadata=network_id,
+                                eth_dst=router_if_mac,
+                                ipv4_src=(src_network, src_netmask),
+                                ipv4_dst=(dst_network, dst_netmask))
 
         actions = [
             parser.OFPActionDecNwTtl(),
             parser.OFPActionSetField(eth_dst=dst_mac),
             parser.OFPActionSetField(reg7=tunnel_key),
         ]
-        action_inst = self.get_datapath().ofproto_parser.OFPInstructionActions(
+        action_inst = parser.OFPInstructionActions(
             ofproto.OFPIT_APPLY_ACTIONS, actions)
         goto_inst = parser.OFPInstructionGotoTable(const.EGRESS_TABLE)
 
diff -ruN dragonflow_baseline/dragonflow/controller/topology.py dragonflow/dragonflow/controller/topology.py
--- dragonflow_baseline/dragonflow/controller/topology.py	2016-08-26 10:30:42.003869000 +0800
+++ dragonflow/dragonflow/controller/topology.py	2016-08-26 10:26:20.692138202 +0800
@@ -265,11 +265,6 @@
             if tenant_id == router.get_topic():
                 self.controller.router_deleted(router.get_id())
 
-        switches = self.db_store.get_lswitchs()
-        for switch in switches:
-            if tenant_id == switch.get_topic():
-                self.controller.logical_switch_deleted(switch.get_id())
-
         sg_groups = self.db_store.get_security_groups()
         for sg_group in sg_groups:
             if tenant_id == sg_group.get_topic():
